#!/usr/bin/env sh
# --- 7975477 --- file:module/support
#!/usr/bin/env sh

##
 # require support - silently set sane options for all shells
 ##

# Options for all shells
#
# -e: Exit if any command has an uncaught error code
# -u: Exit on any use of an undefined variable
# -f: Do not expand glob patterns
set -euf

# Mimic local variables on ksh by aliasing it to typeset
#
# This command is ignored by shells other than ksh
#
if ( test -n "${KSH_VERSION:-}" &&
     test -z "${KSH_VERSION##*Version AJM*}" ) ||
     test -n "${YASH_VERSION:-}"
then
	alias local=typeset
elif test -n "${BASH_VERSION-}"
then
	set -o posix
elif test -n "${ZSH_VERSION-}"
then
	# Unset options for zsh to make it more portable
	#
	# NO_MATCH: Avoid expanding extra filename patterns
	# NO_SH_WORD_SPLIT: Make the word split on zsh behave like POSIX
	#
	# This command is ignored in shells other than zsh.
	#
	unsetopt GLOB NO_MATCH NO_SH_WORD_SPLIT >/dev/null 2>&1 || :
fi
# --- 7975477 --- env:entrypoint
entrypoint='net_fetch'
# --- 7975477 --- func:require
require () ( : )
# --- 7975477 --- file:lib/net/fetch.sh
net_fetch ()
{
	local net_fetch_command

	if curl --help >/dev/null 2>&1
	then
		net_fetch_command='curl --fail -kL'
	elif wget --help >/dev/null 2>&1
	then
		net_fetch_command='wget -qO-'
	fi

	if test -z "${net_fetch_command:-}"
	then
		return 1
	fi

	if test -n "${2:-}"
	then
		${net_fetch_command} "${1}" 2>/dev/null  > "${2}" || return 1
		return 0
	fi

	${net_fetch_command} "${1}" 2>/dev/null
}
# --- 7975477 --- file:module/entrypoint
#!/usr/bin/env sh

##
 # require entrypoint - a modular command runner
 ##

# Run command named by the entrypoint variable or nothing (the : command)
${entrypoint:-:} "${@:-}"
