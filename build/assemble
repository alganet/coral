#!/usr/bin/env sh
# --- 9242301 --- file:module/support
#!/usr/bin/env sh

##
 # require support - silently set sane options for all shells
 ##

# Options for all shells
#
# -e: Exit if any command has an uncaught error code
# -u: Exit on any use of an undefined variable
# -f: Do not expand glob patterns
set -euf

# Mimic local variables on ksh by aliasing it to typeset
#
# This command is ignored by shells other than ksh
#
if ( test -n "${KSH_VERSION:-}" &&
     test -z "${KSH_VERSION##*Version AJM*}" ) ||
     test -n "${YASH_VERSION:-}"
then
	alias local=typeset
elif test -n "${BASH_VERSION-}"
then
	set -o posix
elif test -n "${ZSH_VERSION-}"
then
	# Unset options for zsh to make it more portable
	#
	# NO_MATCH: Avoid expanding extra filename patterns
	# NO_SH_WORD_SPLIT: Make the word split on zsh behave like POSIX
	#
	# This command is ignored in shells other than zsh.
	#
	unsetopt GLOB NO_MATCH NO_SH_WORD_SPLIT >/dev/null 2>&1 || :
fi
# --- 9242301 --- env:entrypoint
entrypoint='assemble'
# --- 9242301 --- func:require
require () ( : )
require_source ()
{
    if test -z "${1:-}"
    then
        return
        elif test "${1}" = "require.sh"
    then
        cat <<'FILESOURCE_SNIPPET'
##
 # require.sh - a portable shell script file loader
 ##

require ()
{
	local suffix=".sh"
	local previous="${dependency:-require}"
	local dependency="${1}"
	shift

	require_loaded="${require_loaded:- }"

	if require_is_loaded "${dependency}" "${previous}" "${@:-}"
	then
		return 0
	fi

	if ! require_include "${dependency}" "${@:-}"
	then
		echo "Could not find dependency '${dependency}'"
		exit $?
	fi
}

require_on_include ()
{
	local required_file="${1}"

	test "${dependency%*${suffix}}${suffix}" = "${dependency}" || return 0

	set --
	. "${required_file}"
}

require_on_request ()
{
	local dependency="${1}"

	if test "${require_loaded#* ${dependency} *}" = "${require_loaded}"
	then
		return 1
	fi
}

require_on_search ()
{
	require_path "${1}"
}

require_path ()
{
	local solved
	local target_path="${2:-${require_path:-}}"
	local IFS=':'

	for solved in ${target_path}
	do
		if test -f "${solved}/${1}"
		then
			printf %s "${solved}/${1}"
			return
		fi
	done
}

require_include ()
{
	local dependency="${1}"
	shift
	local location="$(
		${require_on_search:-require_on_search} "${dependency}" "${@:-}"
	)"

	test -f "${location}" || return 69

	require_loaded="${require_loaded:- }${dependency} "

	${require_on_include:-require_on_include} "${location}" "${dependency}" "${@:-}" ||
		return 1
}

require_is_loaded ()
{
	dependency="${1}"
	previous="${2}"
	require_loaded="${require_loaded:- }"

	${require_on_request:-require_on_request} "${@:-}"
}

require_source ()
{
	cat "$(require_path "${1}")"
}
FILESOURCE_SNIPPET
    elif test "${1}" = "module/entrypoint"
    then
        cat <<'FILESOURCE_SNIPPET'
#!/usr/bin/env sh

##
 # require entrypoint - a modular command runner
 ##

# Run command named by the entrypoint variable or nothing (the : command)
${entrypoint:-:} "${@:-}"
FILESOURCE_SNIPPET
    elif test "${1}" = "module/support"
    then
        cat <<'FILESOURCE_SNIPPET'
#!/usr/bin/env sh

##
 # require support - silently set sane options for all shells
 ##

# Options for all shells
#
# -e: Exit if any command has an uncaught error code
# -u: Exit on any use of an undefined variable
# -f: Do not expand glob patterns
set -euf

# Mimic local variables on ksh by aliasing it to typeset
#
# This command is ignored by shells other than ksh
#
if ( test -n "${KSH_VERSION:-}" &&
     test -z "${KSH_VERSION##*Version AJM*}" ) ||
     test -n "${YASH_VERSION:-}"
then
	alias local=typeset
elif test -n "${BASH_VERSION-}"
then
	set -o posix
elif test -n "${ZSH_VERSION-}"
then
	# Unset options for zsh to make it more portable
	#
	# NO_MATCH: Avoid expanding extra filename patterns
	# NO_SH_WORD_SPLIT: Make the word split on zsh behave like POSIX
	#
	# This command is ignored in shells other than zsh.
	#
	unsetopt GLOB NO_MATCH NO_SH_WORD_SPLIT >/dev/null 2>&1 || :
fi
FILESOURCE_SNIPPET
    else
        cat "$(require_path "${1}")"
    fi
}
# --- 9242301 --- file:lib/require.sh
eval "$(require_source require.sh)"
# --- 9242301 --- file:lib/math/random.sh

math_random ()
{
	echo ${RANDOM:-$(od -An -N3 -i /dev/random)}
}
# --- 9242301 --- file:lib/math/random.sh

math_random ()
{
	echo ${RANDOM:-$(od -An -N3 -i /dev/random)}
}
# --- 9242301 --- file:lib/fs/tempdir.sh

require 'math/random.sh'

fs_tempdir ()
{
	local prefix="${1:-tempdir.sh}"
	local systmp="${TMPDIR:-/tmp}"
    local tempdir="$(mktemp -d "${systmp}/${prefix}.XXXXXX" 2>/dev/null || :)"

    if test -z "${tempdir:-}"
	then
		tempdir="${systmp}/${prefix}.$(math_random)"
	    mkdir -m 'u+rwx' "${tempdir}"
	fi

	echo "${tempdir}"
}
# --- 9242301 --- file:lib/assemble.sh
##
 # assemble.sh
 ##

require 'require.sh' --assemble-source
require 'module/entrypoint' --assemble-source
require 'module/support' --assemble-source
require 'math/random.sh'
require 'fs/tempdir.sh'

assemble ()
{
	shell_route_options_only=true \
		shell_route 'assemble' "${@:-}" ||
			assemble_bundle "${@:-}"
}

assemble_option_help ()
{
	cat <<-HELPTEXT
		Usage: assemble [ARGUMENTS] MODULE OUTPUT_FILE

		Options:
		  --help     Displays this help
		  --version  Displays version information

		MODULE can be any require.sh compatible module in the current
		require_path.

		OUTPUT_FILE must be a path for the output executable file.

	HELPTEXT
}

assemble_bundle ()
{
	local assemble_key="$(math_random)"
	local input="${1:-}"
	local output="${2:--}"
	local assemble_dir="$(fs_tempdir 'assemble')"

	printf '' > "${assemble_dir}/sources"
	assemble_contents "${input}" > "${assemble_dir}/output"

	if test "-" = "${output}"
	then
		cat "${assemble_dir}/output"
	else
		chmod +x "${assemble_dir}/output"
		cp "${assemble_dir}/output" "${output}"
	fi
}

assemble_contents ()
{
	local input="${1:-}"
	local input_file="$(echo "${input}" | tr '_' '/').sh"
	local input_contents=''
	local require_loaded=' '

	echo "#!/usr/bin/env sh"

	echo "# --- ${assemble_key} --- file:module/support"
	require_source 'module/support'

	echo "# --- ${assemble_key} --- env:entrypoint"
	echo "entrypoint='${input}'"

	assemble_dependencies "${input_file}"

	echo "# --- ${assemble_key} --- file:module/entrypoint"
	require_source 'module/entrypoint'
}

assemble_dependencies ()
{
	local require_on_include='assemble_on_include'
	local require_on_request='assemble_on_request'
	local input_file="${1:-}"
	local require_sources=

	require "${input_file}" > "${assemble_dir}/required_modules"

	if require_is_loaded "require.sh" ""
	then
		echo "# --- ${assemble_key} --- env:require_loaded"
		echo "require_loaded='${require_loaded}'"
		echo "# --- ${assemble_key} --- env:require_path"
		echo "require_path='${assemble_path:-${require_path}}'"
		echo "# --- ${assemble_key} --- file:require.sh"
		require_source 'require.sh'
	else
		echo "# --- ${assemble_key} --- func:require"
		echo 'require () ( : )'
	fi

	require_sources="$(cat "${assemble_dir}/sources")"

	if test -n "${require_sources}"
	then
		cat <<-SOURCES_SNIPPET
			require_source ()
			{
			    if test -z "\${1:-}"
			    then
			        return
			    ${require_sources}
			    else
			        cat "\$(require_path "\${1}")"
			    fi
			}
		SOURCES_SNIPPET
	fi
	cat "${assemble_dir}/required_modules"
}


assemble_on_include ()
{
	local target="${1}"
	local target_name="$(basename ${target})"
	local dependency="${2:-}"
	shift 2
	local contents

	contents="$(cat "${target}")"

	test "${target_name%*.sh}.sh" = "${target_name}" || return 0

	require_on_include "${target}"
	echo "# --- ${assemble_key} --- file:${target}"

	if test "${#}" -gt 0 && test "${*#*--assemble-source*}" != "${*:-}"
	then
		echo "eval \"\$(require_source ${dependency})\""
	else
		printf %s\\n "${contents}"
	fi
}


assemble_on_request ()
{
	local dependency="${1}"
	local previous="${2}"
	shift 2

	if test "${#}" -gt 0 && test "${*#*--assemble-source*}" != "${*:-}"
	then
		cat <<-SOURCES_SNIPPET >> "${assemble_dir}/sources"
			    elif test "\${1}" = "${dependency}"
			    then
			        cat <<'FILESOURCE_SNIPPET'
						$(require_source "${dependency}")
					FILESOURCE_SNIPPET
		SOURCES_SNIPPET
	fi

	require_on_request "${target}" "${@:-}"
}
# --- 9242301 --- file:module/entrypoint
#!/usr/bin/env sh

##
 # require entrypoint - a modular command runner
 ##

# Run command named by the entrypoint variable or nothing (the : command)
${entrypoint:-:} "${@:-}"
